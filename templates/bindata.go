// Code generated by go-bindata.
// sources:
// Melody.toml.tt
// bindata.go
// generate.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _melodyTomlTt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x93\x4f\x6b\xdb\x40\x10\xc5\xef\xfb\x29\x1e\xd6\xd5\x91\x73\x2c\x81\x1e\x52\x7a\xe8\xa5\x69\xa1\xa1\x50\x4a\x0a\x63\x69\x2c\x4d\xbd\xda\x55\x77\x46\x76\x85\xf0\x77\x2f\x2b\xdb\xa9\x12\x72\x10\xec\x1f\xcd\xe3\xf7\xde\xcc\x16\xf8\x40\x2a\x15\x6a\x36\x12\xaf\xa0\x6d\x1c\x0c\xd6\x8a\x22\x71\x1f\x55\x2c\xa6\xb1\x74\xee\x67\x9f\xe2\x6f\xae\xec\xc9\x05\xea\x18\xef\xb1\x9a\x26\x94\x0f\x79\x7d\x3a\xad\xdc\x81\x93\x4a\x0c\xd7\xf3\xef\x97\x6d\xbe\x72\x05\x3e\x72\xcf\xa1\xe6\x50\x09\x2b\x94\x2b\xcb\x77\x5e\xd4\x14\xd6\x32\x7a\xaa\xf6\xd4\x70\xde\x90\x81\x12\x23\xf1\x9f\x41\x12\xd7\xb0\x88\xed\x20\xbe\xc6\x18\x87\x84\x0b\x43\xe9\x0a\x7c\x66\x1f\xeb\x11\x83\xce\x65\xa2\x90\xb0\x8b\xa9\xa3\x59\xda\x22\xaa\xd8\xf5\x83\x31\x28\xd4\x90\xa0\x46\xde\x23\x7f\x75\x3c\x06\xb5\xc4\xd4\xa1\x5e\x50\x65\xc9\xc7\x96\xb1\xe7\x31\x4b\x9d\x25\xaf\xa4\x99\x68\xc1\x89\x9c\x80\xce\xca\x07\xf2\x43\x5e\x26\xc6\x35\x81\xc4\x6a\x49\xe6\xc2\x59\xf5\x47\x1c\x50\x51\xc8\xa4\x20\x68\xcf\x95\xec\xa4\x82\x51\xd3\x70\x7d\xad\x5a\xe3\xdb\xa7\x7b\x24\x3e\xc8\x79\x17\x13\xe8\xbf\x22\x85\x86\xb3\xa7\x40\x29\xc5\xa3\x2b\x66\x13\x38\xe6\xb0\x44\x67\xa7\x64\xb2\xf5\x8c\xa3\x58\xfb\x22\xa9\x3b\x57\xa0\x35\xeb\xf5\x6e\xb3\x69\xc4\xda\x61\x5b\x56\xb1\xdb\x74\x73\x78\xda\x5e\x16\xc5\x99\x6a\x94\xd0\xdc\x3c\x87\x32\xde\x2c\x9d\xb8\xc2\x15\xf8\xea\x99\x94\x11\xa2\xf1\xb9\x55\xcb\x04\xe7\x10\x5e\x25\xa4\x57\xbf\x9c\x9b\x70\x26\x93\xae\x8f\xc9\x5c\x01\x35\x32\xee\x38\x98\xae\xf1\xf0\xe5\x71\x31\x6e\xe8\xc9\x5a\x2d\x81\x7b\x6f\x6d\x1c\x9a\x16\xf4\xfa\x16\x1d\x8d\xe0\xbf\xa2\xb6\xce\xb2\xae\xc0\x51\xbc\x87\x72\xee\x38\x38\xa5\x98\x20\xbb\xb9\x6b\x29\x46\x7b\x06\xab\x28\x84\x68\xd8\xf2\x85\x83\xeb\x3c\xdb\x4b\x1f\x4f\x6e\x9a\x72\x69\xf9\x62\x68\x4f\xa7\x69\x82\xc5\xce\xbf\x75\xce\x5e\xf3\x2b\x70\x05\x56\x8b\x90\xfb\x7d\xb3\x99\x41\x74\x95\x9f\xc5\xaf\xdb\xf2\x5d\x79\xbb\xca\xea\x1c\xea\xfc\xfb\xbf\x00\x00\x00\xff\xff\xe6\xda\x39\x70\x7b\x03\x00\x00")

func melodyTomlTtBytes() ([]byte, error) {
	return bindataRead(
		_melodyTomlTt,
		"Melody.toml.tt",
	)
}

func melodyTomlTt() (*asset, error) {
	bytes, err := melodyTomlTtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Melody.toml.tt", size: 891, mode: os.FileMode(420), modTime: time.Unix(1476778674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1476778822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\x08\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x2a\xc0\x10\xe1\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x47\x28\x54\xd0\xe3\x02\x04\x00\x00\xff\xff\x92\x4a\x58\x66\x52\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 82, mode: os.FileMode(420), modTime: time.Unix(1476775014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Melody.toml.tt": melodyTomlTt,
	"bindata.go": bindataGo,
	"generate.go": generateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Melody.toml.tt": &bintree{melodyTomlTt, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"generate.go": &bintree{generateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

