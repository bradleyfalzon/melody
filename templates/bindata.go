// Code generated by go-bindata.
// sources:
// Melody.toml.tt
// bindata.go
// generate.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _melodyTomlTt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x93\xcf\x6a\xdc\x4c\x10\xc4\xef\xf3\x14\xc5\xea\x6a\x6b\x7d\xfc\x30\x7c\x07\x87\x1c\x72\x89\x13\x88\x09\x84\xe0\x40\xaf\xd4\x96\x3a\x1e\x4d\x2b\xd3\x2d\x6f\xc4\xb2\xef\x1e\x46\xeb\x75\x64\x93\x83\x60\xfe\xa8\x8b\x5f\x55\xf7\x54\x78\x47\x26\x0d\x5a\x76\x92\x68\xa0\x9d\x4e\x0e\xef\xc5\x90\x79\x54\x13\xd7\x3c\xd7\x21\x7c\x1f\xb3\xfe\xe4\xc6\xef\x43\xa2\x81\xf1\x3f\x36\x87\x03\xea\xdb\xb2\x3e\x1e\x37\xe1\x89\xb3\x89\xa6\xf3\xf9\xd7\xe7\x6d\xb9\x0a\x15\xde\xf3\xc8\xa9\xe5\xd4\x08\x1b\x8c\x1b\x2f\x77\x51\xcc\x0d\xde\x33\x46\x6a\x1e\xa9\xe3\xb2\x21\x07\x65\x46\xe6\x5f\x93\x64\x6e\xe1\x8a\xdd\x24\xb1\xc5\xac\x53\xc6\x33\x43\x1d\x2a\x7c\xe4\xa8\xed\x8c\xc9\x96\x32\x31\x48\x7a\xd0\x3c\xd0\x22\xed\x8a\x46\x87\x71\x72\x06\xa5\x16\x92\xcc\x29\x46\x94\xaf\xd5\x7d\x32\xcf\x4c\x03\xda\x15\x55\x91\xbc\xeb\x19\x8f\x3c\x17\xa9\x93\xe4\x99\xb4\x10\xad\x38\x51\x12\xb0\x45\xf9\x89\xe2\x54\x96\x99\x71\x4e\x20\xb3\x79\x96\xa5\x70\x51\xfd\xa6\x13\x1a\x4a\x85\x14\x04\x1b\xb9\x91\x07\x69\xe0\xd4\x75\xdc\x9e\xab\x2e\xf0\xe5\xc3\x0d\x32\x3f\xc9\x69\xa7\x19\xf4\x57\x91\x52\xc7\xc5\x53\xa2\x9c\x75\x1f\xaa\xc5\x04\xf6\x25\x2c\xb1\xc5\x29\xb9\xec\x22\x63\x2f\xde\xbf\x4a\xea\x3a\x54\xe8\xdd\x47\xbb\xde\x6e\x3b\xf1\x7e\xda\xd5\x8d\x0e\xdb\xa1\x9d\xb7\xc3\x12\x60\x75\x02\x9a\x25\x75\x97\x2f\x79\xcc\x97\x6b\x13\xa1\x0a\x15\x3e\x47\x26\x63\x24\x75\x3e\x75\x69\x1d\xde\xe2\xff\x4d\x38\x76\xb6\xca\x25\xff\x13\x94\x0c\xa3\x66\x0f\x15\xcc\xc9\x79\xe0\xe4\x76\x81\xdb\x4f\x77\xab\x49\xc3\x48\xde\x5b\x0d\xdc\x44\xef\x75\xea\x7a\xd0\xdb\x5b\x0c\x34\x83\x7f\x8b\xf9\x45\x91\x0d\x15\xf6\x12\x23\x8c\x4b\xb3\xc1\x39\x6b\x86\x3c\x2c\x0d\xcb\xaa\xfe\x02\xd6\x50\x4a\xea\xd8\xf1\x33\x07\xb7\x65\xac\xd7\x3e\xee\xc3\xe1\x50\x4a\xeb\x57\xf3\x7a\x3c\x1e\x0e\x70\x1d\xe2\xbf\xce\x39\x5a\x79\x00\xa1\xc2\x66\x95\xef\xf8\xd8\x6d\x17\x10\xdb\x94\x17\xf1\xe3\xaa\xfe\xaf\xbe\xda\x14\x75\x4e\x6d\xf9\xfd\x4f\x00\x00\x00\xff\xff\x1b\x3b\xae\xcd\x76\x03\x00\x00")

func melodyTomlTtBytes() ([]byte, error) {
	return bindataRead(
		_melodyTomlTt,
		"Melody.toml.tt",
	)
}

func melodyTomlTt() (*asset, error) {
	bytes, err := melodyTomlTtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Melody.toml.tt", size: 886, mode: os.FileMode(420), modTime: time.Unix(1478586434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478586481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\x08\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x2a\xc0\x10\xe1\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x47\x28\x54\xd0\xe3\x02\x04\x00\x00\xff\xff\x92\x4a\x58\x66\x52\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 82, mode: os.FileMode(420), modTime: time.Unix(1477640857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Melody.toml.tt": melodyTomlTt,
	"bindata.go":     bindataGo,
	"generate.go":    generateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Melody.toml.tt": &bintree{melodyTomlTt, map[string]*bintree{}},
	"bindata.go":     &bintree{bindataGo, map[string]*bintree{}},
	"generate.go":    &bintree{generateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
