// Code generated by go-bindata.
// sources:
// Melody.toml.tt
// bindata.go
// generate.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _melodyTomlTt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x92\x4f\x6b\xdb\x4c\x10\xc6\xef\xfb\x29\x1e\xac\x6b\x22\xe7\xf8\x12\x78\x0f\x29\x3d\xf4\xd2\x3f\xd0\x5c\x4a\x49\x61\x2c\x8d\xa5\xa9\x57\x3b\xea\xce\xc8\xae\x08\xf9\xee\x65\x65\x3b\x55\x73\x30\xec\x62\xcd\x8f\xdf\xf3\xcc\x56\x78\x47\x26\x0d\x5a\x76\x92\x68\xa0\x9d\x4e\x0e\xef\xc5\x90\x79\x54\x13\xd7\x3c\xd7\x21\x7c\x1f\xb3\xfe\xe4\xc6\x9f\xc2\xf3\xb3\xeb\x10\x51\xbf\xbc\x84\x50\xe1\x3d\x8f\x9c\x5a\x4e\x8d\xb0\xc1\xb8\x71\xd1\x84\x28\xe6\x06\xef\x19\x23\x35\x07\xea\xb8\x5c\xc8\x41\x99\x91\xf9\xd7\x24\x99\x5b\xb8\x62\x37\x49\x6c\x31\xeb\x94\x71\xc1\xd7\xa1\xc2\x47\x8e\xda\xce\x98\x6c\x19\x13\x83\xa4\xbd\xe6\x81\x16\xb4\x2b\x1a\x1d\xc6\xc9\x19\x94\x5a\x48\x32\xa7\x18\x51\x7e\xad\x9e\x92\x79\x66\x1a\xd0\xae\xac\x0a\xf2\xb1\x67\x1c\x78\x2e\xa8\x33\xf2\x6a\x5a\x8c\x56\x9e\x48\x34\xb0\x2d\xe4\x23\xc5\xa9\x1c\x33\xe3\xc8\xd9\xca\xc7\x99\xcd\xb3\x2c\x83\x0b\xf5\x9b\x4e\x68\x28\x15\x53\x10\x6c\xe4\x46\xf6\xd2\xc0\xa9\xeb\xb8\xbd\x4e\xdd\xe0\xeb\x87\x07\x64\x3e\xca\xf9\xa6\x19\xf4\x97\x48\xa9\xe3\x92\x29\x51\xce\x7a\x0a\xd5\x12\x02\xa7\x52\x96\xd8\x92\x94\x5c\x76\x91\x71\x12\xef\xff\x69\xea\x3e\x54\xe8\xdd\x47\xbb\xdf\x6e\x3b\xf1\x7e\xda\xd5\x8d\x0e\xdb\x61\x29\xef\xd6\xfa\xcb\xa9\x3a\x6b\xcd\x92\xba\xdb\xd7\x56\xe6\xdb\x75\x94\x50\x85\x0a\x5f\x22\x93\x31\x92\x3a\x9f\x77\xb5\xae\x70\x69\xe1\x4d\x45\x76\x0d\xcc\x65\x0b\x67\x35\x19\x46\xcd\x1e\x2a\x98\x93\xf3\xc0\xc9\xed\x06\x9f\x3e\x3f\xae\x9e\x12\x46\xf2\xde\x6a\xe0\x21\x7a\xaf\x53\xd7\x83\xde\xfe\x8b\x81\x66\xf0\x6f\x31\xbf\x29\xd8\x50\xe1\x24\x31\xc2\xb8\xac\x1c\x9c\xb3\x66\xc8\x7e\x59\x5b\x56\xf5\x57\xb1\x86\x52\x52\xc7\x8e\x2f\x1e\xdc\x96\x77\xbb\xce\xf1\x14\x2a\x6c\x56\x65\x8d\x87\x6e\xbb\xf0\x6c\x83\xff\xb1\xf9\x71\x57\xff\x57\xdf\x6d\xc2\x9f\x00\x00\x00\xff\xff\xa2\xef\x1b\x9a\x14\x03\x00\x00")

func melodyTomlTtBytes() ([]byte, error) {
	return bindataRead(
		_melodyTomlTt,
		"Melody.toml.tt",
	)
}

func melodyTomlTt() (*asset, error) {
	bytes, err := melodyTomlTtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Melody.toml.tt", size: 788, mode: os.FileMode(420), modTime: time.Unix(1475637962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1475637975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\x08\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x2a\xc0\x10\xe1\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x47\x28\x54\xd0\xe3\x02\x04\x00\x00\xff\xff\x92\x4a\x58\x66\x52\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 82, mode: os.FileMode(420), modTime: time.Unix(1475629808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Melody.toml.tt": melodyTomlTt,
	"bindata.go": bindataGo,
	"generate.go": generateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Melody.toml.tt": &bintree{melodyTomlTt, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"generate.go": &bintree{generateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

